scale_y_continuous(breaks = NULL) +
ylim(low = 0, high = 5)
}
})
output$beliefDistributionPlot <- renderPlot({ })
})
### EOD ###
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
# TRUTH AND CONFORMITY ON NETWORKS
# << UI >>
# by Aydin Mohseni & Cole Williams
# Load the shiny GUI library
library(shiny)
# Set encoding for special characters
Sys.setlocale("LC_ALL", "fr_FR.UTF-8")
# Define UI for application
shinyUI(fluidPage(
# CSS for visual
includeCSS("www/style.css"),
# Main title
titlePanel("Truth and Conformity in Dynamic Networks"),
# Load MathJax
withMathJax(),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("Players",
"Number of Players:",
min = 2,
max = 50,
value = 20
),
selectInput("NetworkType",
"Network Type",
c("Complete", "Circle", "Star", "Random"),
selected = "Complete"
),
# Only show this panel only if CUSTOM is selected in NETWORK TYPE
conditionalPanel(
condition = "input.NetworkType == 'Random'",
sliderInput("NetworkDensity", "NetworkDensity",
min =1 ,
max = 20,
value = 4,
ticks = FALSE
)
),
selectInput("InitialDeclarations",
"Initial Declarations",
c("Consensus on Truth", "Mixed", "Consensus on Falsity"),
selected = "Consensus on Falsity"
),
selectInput("TypeDistribution",
"Type Distribution",
c("All Truth-Seeking", "Mixed", "All Conformist"),
selected = "Mixed"
),
# Only show this panel only if MIXED is selected in TYPE DISTRIBUTION
conditionalPanel(
condition = "input.TypeDistribution == 'Mixed'",
style='margin-bottom:80px;',
column(width = 5,
sliderInput("TypeAlpha", "Alpha",
min = 0 ,
max = 5,
value = 1,
step = .2,
ticks = FALSE
)
),
column(width = 5,
sliderInput("TypeBeta", "Beta",
min = 0 ,
max = 5,
value = 1,
step = .2,
ticks = FALSE
)
),
plotOutput(outputId = "TypeDistributionPlot", width = "50%")
),
sliderInput("Duration",
"Full Rounds of Play:",
min = 1,
max = 10,
value = 2,
ticks = FALSE
),
p(actionButton("runSimulation", "Run Simulation"), align = "center")
),
# Show a plot of the generated distribution
mainPanel(
style='margin-bottom:180px;',
tabsetPanel(type = "tabs",
tabPanel("Initial Network",
plotOutput(outputId = "networkInit",
width = "100%")
),
tabPanel("Network Game"
# ,
# plotOutput(outputId = "networkAnimation",
#            width = "100%")
),
tabPanel("Evolution of Beliefs and Declarations",
column(width = 6, offset = 0, style='padding:20px;',
plotOutput(outputId = "evolutionPlot")
)
)
)
)
)))
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
alpha1 <- 5
beta2 <- 1
x <- seq(0, 1, length=100)
y <- dbeta(x, alpha1, beta2)
dat <- data.frame(x, y)
colnames(dat) <- c("x", "y")
ggplot(data=dat, aes(x=x, y=y)) +
geom_area(colour="orange", fill="orange") +
labs(x = "Truth-Seeking Orientaton", y = NULL) +
theme_bw() +
theme(axis.text = element_text(size = 12)) +
theme(axis.title = element_text(size = 12)) +
scale_x_continuous(breaks = seq(0, 1, .5)) +
scale_y_continuous(breaks = seq(0, 5, 1)) +
ylim(low = 0, high= 3) +
plot.background = element_rect(fill = "transparent",colour = NA)
alpha1 <- 5
beta2 <- 1
x <- seq(0, 1, length=100)
y <- dbeta(x, alpha1, beta2)
dat <- data.frame(x, y)
colnames(dat) <- c("x", "y")
ggplot(data=dat, aes(x=x, y=y)) +
geom_area(colour="orange", fill="orange") +
labs(x = "Truth-Seeking Orientaton", y = NULL) +
theme_bw() +
theme(axis.text = element_text(size = 12)) +
theme(axis.title = element_text(size = 12)) +
scale_x_continuous(breaks = seq(0, 1, .5)) +
scale_y_continuous(breaks = NULL) +
ylim(low = 0, high= 3) +
plot.background = element_rect(fill = "transparent",colour = NA)
alpha1 <- 1
beta2 <- 1
x <- seq(0, 1, length=100)
y <- dbeta(x, alpha1, beta2)
dat <- data.frame(x, y)
colnames(dat) <- c("x", "y")
ggplot(data=dat, aes(x=x, y=y)) +
geom_area(colour="orange", fill="orange") +
labs(x = "Truth-Seeking Orientaton", y = NULL) +
theme_bw() +
theme(axis.text = element_text(size = 12)) +
theme(axis.title = element_text(size = 12)) +
scale_x_continuous(breaks = seq(0, 1, .5)) +
scale_y_continuous(breaks = NULL) +
ylim(low = 0, high= 3) +
plot.background = element_rect(fill = "transparent",colour = NA)
alpha1 <- 1
beta2 <- 1
x <- seq(0, 1, length=100)
y <- dbeta(x, alpha1, beta2)
dat <- data.frame(x, y)
colnames(dat) <- c("x", "y")
ggplot(data=dat, aes(x=x, y=y)) +
geom_area(colour="orange", fill="orange") +
labs(x = "Truth-Seeking Orientaton", y = NULL) +
theme_bw() +
theme(axis.text = element_text(size = 12)) +
theme(axis.title = element_text(size = 12)) +
scale_x_continuous(breaks = seq(0, 1, .5)) +
scale_y_continuous(breaks = NULL) +
ylim(low = 0, high= 3)
alpha1 <- 1
beta2 <- 1
x <- seq(0, 1, length=100)
y <- dbeta(x, alpha1, beta2)
dat <- data.frame(x, y)
colnames(dat) <- c("x", "y")
ggplot(data=dat, aes(x=x, y=y)) +
geom_area(colour="orange", fill="orange") +
labs(x = "Truth-Seeking Orientaton", y = NULL) +
theme_bw() +
theme(axis.text = element_text(size = 12)) +
theme(axis.title = element_text(size = 12)) +
scale_x_continuous(breaks = seq(0, 1, .5)) +
scale_y_continuous(breaks = NULL) +
ylim(low = 0, high= 3) +
plot.background = element_rect(fill = "transparent",colour = NA)
alpha1 <- 1
beta2 <- 1
x <- seq(0, 1, length=100)
y <- dbeta(x, alpha1, beta2)
dat <- data.frame(x, y)
colnames(dat) <- c("x", "y")
ggplot(data=dat, aes(x=x, y=y)) +
geom_area(colour="orange", fill="orange") +
labs(x = "Truth-Seeking Orientaton", y = NULL) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
plot.background = element_rect(fill = "transparent", colour = NA))
theme(axis.text = element_text(size = 12)) +
theme(axis.title = element_text(size = 12)) +
ylim(low = 0, high= 3)
alpha1 <- 1
beta2 <- 1
x <- seq(0, 1, length=100)
y <- dbeta(x, alpha1, beta2)
dat <- data.frame(x, y)
colnames(dat) <- c("x", "y")
ggplot(data=dat, aes(x=x, y=y)) +
geom_area(colour="orange", fill="orange") +
labs(x = "Truth-Seeking Orientaton", y = NULL) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
plot.background = element_rect(fill = "transparent", colour = NA)
) +
theme(axis.text = element_text(size = 12)) +
theme(axis.title = element_text(size = 12)) +
ylim(low = 0, high= 3)
alpha1 <- 1
beta2 <- 1
x <- seq(0, 1, length=100)
y <- dbeta(x, alpha1, beta2)
dat <- data.frame(x, y)
colnames(dat) <- c("x", "y")
ggplot(data=dat, aes(x=x, y=y)) +
geom_area(colour="orange", fill="orange") +
labs(x = "Truth-Seeking Orientaton", y = NULL) +
theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
plot.background = element_rect(fill = "transparent", colour = NA)
) +
ylim(low = 0, high= 3)
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
rbeta(N, 1, 1)
rbeta(N, 1, 1)
rbeta(N, 1, 1)
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
rbinom(N, 1, .5)
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
palette(c("white", "orange"))
palette
palette()
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
brewer.pal(n = 8, name = "Set2")
palette()
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
cc <- palette()
palette(c(cc,"purple","brown"))
cc
palette()
palette("default")
palette()
HistoryOfPlay
pal[oneAffil]
palette()
palette(c("white", "blue"))
palette(c("white", "blue"))
x <- palette(c("white", "blue"))
x
V(net)
V(net)$color
V(net)$color <- palette()
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
V(net)$color
Neighbors <- Neighbors[!is.na(Neighbors)]
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
data.frame(nodes, t(HistoryOfPlay))
HistoryOfPlay
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
install.packages("shinyBS")
library("shinyBS", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
N*Duration+1
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
N * Duration + 1
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
x <- as.numeric(input$N)
y <- as.numeric(input$Duration)
Duration
N
x
x <- as.numeric(20)
x
y <- as.numeric(2)
x*y+1
x * y + 1
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
simulationStep + 1
input$simulationStep + 1
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
colrs
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Moran-Process')
runApp('~/GitHub/Moran-Process')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
PublicBeliefActionPlot
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
?legend
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
?legend
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
options(shiny.reactlog=TRUE)
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
edges
NetworkDensity
rep(1:N, each = N)
combn(4,0:N)
N
combn(4,0:2)
?combn
combn(0:4, 2)
combn(0:N, 2)
t(combn(0:N, 2))
data.frame(t(combn(0:N, 2)))
colnames(edges) <- c("from", "to")
edges
edges
numberOfPossibleEdges <- choose(N, 2)
numberOfPossibleEdges
sample(1:numberOfPossibleEdges, numberOfPossibleEdges*.3, replace = FALSE)
edges
randomEdgesSubset
sample(1:numberOfPossibleEdges, numberOfEdges, replace = FALSE)
edges[c(1, 3, 4)]
edges[c(1, 3, 4), ]
shiny::runApp('~/GitHub/Truth-and-Conformity-on-Networks')
edges
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
choose(N, 2)
data.frame(t(combn(0:N, 2)))
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
edges
data.frame(from = rep(1, N-1), to = 2:N)
adjacencyMatrix <- data.frame(matrix(NA, nrow = N, ncol = N-1))
for (i in 1:N) {
d <- subset(edges, from == i | to == i)
if ( nrow(d)!=0 ) { d <- unique(d[d != i]) } else { d <- c() }
adjacencyMatrix[i,] <- c(d, rep(NA, N-1-length(d)))
}
adjacencyMatrix
d
for (i in 1:N) {
d <- subset(edges, from == i | to == i)
if ( nrow(d)!=0 ) { d <- unique(d[d != i]) } else { d <- c() }
adjacencyMatrix[i,] <- c(d, rep(NA, N-1-length(d)))
}
adjacencyMatrix
edges <- data.frame(from = rep(1, N-1), to = 2:N)
edges
adjacencyMatrix <- data.frame(matrix(NA, nrow = N, ncol = N-1))
for (i in 1:N) {
d <- subset(edges, from == i | to == i)
if ( nrow(d)!=0 ) { d <- unique(d[d != i]) } else { d <- c() }
adjacencyMatrix[i,] <- c(d, rep(NA, N-1-length(d)))
}
adjacencyMatrix
adjacencyMatrix[i,]
Neighbors
Neighbors[!is.na(Neighbors)]
z <- table(factor(NetworkChoices[Neighbors], c(0,1)))[[C+1]] / (N-1)
z
length(Neighbors)
table(factor(NetworkChoices[Neighbors], c(0,1)))[[C+1]]
table(factor(NetworkChoices[Neighbors], c(0,1)))[[C+1]] / length(Neighbors)
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
runApp('~/GitHub/Truth-and-Conformity-on-Networks')
shiny::runApp('~/GitHub/Truth-and-Conformity-on-Networks')
